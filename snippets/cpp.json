{
	"C++ Template": {
	  "prefix": "CP",
	  "body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"typedef long long ll;",
		"typedef vector<int> vi;",
		"typedef vector<ll> vl;",
		"typedef vector<vi> vvi;",
		"typedef vector<vl> vvl;",
		"typedef pair<int,int> pii;",
		"typedef pair<double, double> pdd;",
		"typedef pair<ll, ll> pll;",
		"typedef vector<pii> vii;",
		"typedef vector<pll> vll;",
		"typedef double dl;",
		"",
		"#define PB push_back",
		"#define F first",
		"#define S second",
		"#define endl '\\n'",
		"#define all(a) (a).begin(),(a).end()",
		"#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
		"#define mem(a,b) memset(a, b, sizeof(a) )",
		"#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);",
		"#define file() freopen(\"input.txt\",\"r\",stdin);freopen(\"output.txt\",\"w\",stdout);",
		"",
		"//debugger",
		"template < typename F, typename S >",
		"ostream& operator << ( ostream& os, const pair< F, S > & p ) {",
		"            return os << \"(\" << p.first << \", \" << p.second << \")\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const vector< T > &v ) {",
		"            os << \"{\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"}\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const set< T > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const multiset< T > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"template < typename F, typename S >",
		"ostream &operator << ( ostream & os, const map< F, S > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << it -> first << \" = \" << it -> second ;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"#define dbg(args...) do {cerr << #args << \" : \"; faltu(args); } while(0)",
		"",
		"void faltu () {",
		"            cerr << endl;",
		"}",
		"",
		"template <typename T>",
		"void faltu( T a[], int n ) {",
		"            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';",
		"                cerr << endl;",
		"}",
		"",
		"template <typename T, typename ... hello>",
		"void faltu( T arg, const hello &... rest) {",
		"            cerr << arg << ' ';",
		"                faltu(rest...);",
		"}",
		"",
		"int main() {",
		"    optimize();",
		"",
		"    int t;",
		"    cin >> t;",
		"    while(t--){",
		"    }",
		"}"
	  ],
	  "description": "Template for Competitive Programming in C++"
	},
	"C++ Template2": {
	  "prefix": "Eshad",
	  "body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"typedef long long ll;",
		"typedef vector<int> vi;",
		"typedef vector<ll> vl;",
		"typedef vector<vi> vvi;",
		"typedef vector<vl> vvl;",
		"typedef pair<int,int> pii;",
		"typedef pair<double, double> pdd;",
		"typedef pair<ll, ll> pll;",
		"typedef vector<pii> vii;",
		"typedef vector<pll> vll;",
		"typedef double dl;",
		"",
		"#define PB push_back",
		"#define F first",
		"#define S second",
		"#define endl '\\n'",
		"#define all(a) (a).begin(),(a).end()",
		"#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
		"#define mem(a,b) memset(a, b, sizeof(a) )",
		"#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);",
		"#define file() freopen(\"input.txt\",\"r\",stdin);freopen(\"output.txt\",\"w\",stdout);",
		"",
		"//debugger",
		"template < typename F, typename S >",
		"ostream& operator << ( ostream& os, const pair< F, S > & p ) {",
		"            return os << \"(\" << p.first << \", \" << p.second << \")\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const vector< T > &v ) {",
		"            os << \"{\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"}\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const set< T > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"template < typename T >",
		"ostream &operator << ( ostream & os, const multiset< T > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << *it;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"template < typename F, typename S >",
		"ostream &operator << ( ostream & os, const map< F, S > &v ) {",
		"            os << \"[\";",
		"                for(auto it = v.begin(); it != v.end(); ++it) {",
		"                                if( it != v.begin() ) os << \", \";",
		"                                        os << it -> first << \" = \" << it -> second ;",
		"                                            }",
		"                    return os << \"]\";",
		"}",
		"",
		"#define dbg(args...) do {cerr << #args << \" : \"; faltu(args); } while(0)",
		"",
		"void faltu () {",
		"            cerr << endl;",
		"}",
		"",
		"template <typename T>",
		"void faltu( T a[], int n ) {",
		"            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';",
		"                cerr << endl;",
		"}",
		"",
		"template <typename T, typename ... hello>",
		"void faltu( T arg, const hello &... rest) {",
		"            cerr << arg << ' ';",
		"                faltu(rest...);",
		"}",
		"",
		"int main() {",
		"    optimize();",
		"",
		"    int t;",
		"    cin >> t;",
		"    while(t--){",
		"    }",
		"}"
	  ],
	  "description": "Template for Competitive Programming in C++"
	},
	"C++ Macros": {
	  "prefix": "macros",
	  "body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"typedef long long ll;",
		"typedef vector<int> vi;",
		"typedef vector<ll> vl;",
		"typedef vector<vi> vvi;",
		"typedef vector<vl> vvl;",
		"typedef pair<int,int> pii;",
		"typedef pair<double, double> pdd;",
		"typedef pair<ll, ll> pll;",
		"typedef vector<pii> vii;",
		"typedef vector<pll> vll;",
		"typedef double dl;",
		"",
		"#define PB push_back",
		"#define F first",
		"#define S second",
		"#define endl '\\n'",
		"#define all(v) (v).begin(),(v).end()",
		"#define arrIn(a, n) for(int i = 0; i < (n); i++) { cin >> (a)[i]; }",
		"#define arrIn2D(arr, rows, cols) for (int i = 0; i < (rows); ++i) { for (int j = 0; j < (cols); ++j) { std::cin >> arr[i][j]; } }",
		"#define arrOut2D(arr, rows, cols) for (int i = 0; i < (rows); ++i) { for (int j = 0; j < (cols); ++j) { std::cout << arr[i][j] << \" \"; } std::cout << \"\\n\"; } ",
		"#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
		"#define mem(a,b) memset(a, b, sizeof(a) )",
		"#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);",
		"#define file(input, output) freopen(input,\"r\",stdin);freopen(output,\"w\",stdout);",
		"",
		"",
		"void mysolve() {",
		"}",
		"",
		"int main() {",
		"    optimize();",
		"",
		"    int t;",
		"    cin >> t;",
		"    while(t--){",
		"        mysolve();",
		"    }",
		"",
		"    return 0;",
		"}"
	  ],
	  "description": "Macros for Competitive Programming in C++"
	},
	"Modified String": {
	  "prefix": "myStringClass",
	  "body": [
		"class myString : public string {",
		"public:",
		"    myString(const string& s) : string(s) {}",
		"    myString upper() const {",
		"        myString str = *this;",
		"        transform(str.begin(), str.end(), str.begin(), ::toupper);",
		"        return str;",
		"    }",
		"    myString lower() const {",
		"        myString str = *this;",
		"        transform(str.begin(), str.end(), str.begin(), ::tolower);",
		"        return str;",
		"    }",
		"};"
	  ],
	  "description": "Custom string class with upper and lower methods"
	}
}
  